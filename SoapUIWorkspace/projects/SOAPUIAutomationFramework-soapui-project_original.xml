<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="6ba2979e-aeaa-4b4d-bd51-61d068a10204" activeEnvironment="Default" name="SOAPUIAutomationFramework" resourceRoot="" soapui-version="5.3.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:testSuite id="18141f97-49d5-451a-be8e-740fd00633ba" name="WebServiceTestSuite"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="f1a31b23-e4f5-4864-96cd-5afec5cc063c" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="WebServiceTest" searchProperties="true"><con:settings/><con:testStep type="groovy" name="createFolder" id="b773b9f9-a633-4cee-be5f-e8eb37748d2a"><con:settings/><con:config><script>/* Author: Preet Kumar
 * emailId: preetkumar897@gmail.com
 * Mobile: 961699669
 * Linkedin: linkedin.com/in/preetkumar897
 * Description: Create folder structure which is required to run the test case. Initiate the test case with row 1.
 */

import groovy.io.FileType

//Get project name
def groovyUtils=new  com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath

//Get testcase name
def testCase = testRunner.testCase.name
testRunner.testCase.setPropertyValue('TESTCASE_NAME', testCase)

//Get timestamp
def timeStamp = new Date().format("yyyy-MM-dd HH:mm:ss SSS")
testRunner.testCase.testSuite.project.setPropertyValue('TIMESTAMP', timeStamp)


//Set output path
def outputFolderPath = projectPath+"/../output/"+testCase+timeStamp
testRunner.testCase.setPropertyValue('OUTPUT_FOLDER_PATH', outputFolderPath)

//Create folder inside Output folder if does not exist
def folder = new File(outputFolderPath)
if (!folder.exists()){
	folder.mkdirs()
}

//Setting ROW_NUM to 1 to read the test data from row number one, 
//before every run it will be set to 1 to start the test from row number 1
String rowNum = 1
testRunner.testCase.setPropertyValue('ROW_NUM', rowNum)</script></con:config></con:testStep><con:testStep type="groovy" name="bootstrap" id="5d7fc3ea-11e1-4ece-bba6-025fe47d7fd9"><con:settings/><con:config><script>/* Author: Preet Kumar
 * emailId: preetkumar897@gmail.com
 * Mobile: 961699669
 * Linkedin: linkedin.com/in/preetkumar897
 * Description: Fetch the following fields from testdata sheet; Execute, Operation, WebService, EndPoint, UserName, Password, KeyStore, KeyPass, Env, TestCase
 * Set the values at different level for test execution
 */
 
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFDateUtil;
import org.apache.poi.hssf.usermodel.HSSFHyperlink;
import org.apache.poi.hssf.util.HSSFColor;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.xssf.usermodel.*;

import com.eviware.soapui.settings.SSLSettings
import com.eviware.soapui.SoapUI

	def rowNum = testRunner.testCase.getPropertyValue("ROW_NUM").toInteger()
	def testCaseName = testRunner.testCase.getPropertyValue("TESTCASE_NAME")
	def projectName = testRunner.testCase.testSuite.project.name
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
	def projectPath = groovyUtils.projectPath
	def testDataFilePath = projectPath+"/../testData/"+projectName+".xlsx"
	def XSSFWorkbook workbook = null;
     def XSSFSheet sheet = null;
     def XSSFRow row   =null;
     def XSSFCell cell = null
     def String filename = null
     def String path;
     def FileInputStream fis = null;
     def FileOutputStream fileOut =null;

     fis = new FileInputStream(new File(testDataFilePath));
	workbook = new XSSFWorkbook(fis);
	sheet = workbook.getSheet(testCaseName);
	int rowCount = sheet.getLastRowNum().toInteger()

	if(rowNum&lt;=rowCount){
		gRow = sheet.getRow(rowNum)
		gCell = gRow.getCell(0)
		String exeValue = gCell.getStringCellValue()
		log.info "FLAG $exeValue"
		
		if(exeValue=="Y"){
			colCount = sheet.getRow(rowNum).getLastCellNum()

			for(j=1;j&lt;colCount;j++){
				gRow = sheet.getRow(0)
				gCell = gRow.getCell(j)
				String headerValue = gCell.getStringCellValue()
			//Fetching web service name from the excel sheet
				if(headerValue.contains("WebService")){
					gRow = sheet.getRow(rowNum)
					gCell = gRow.getCell(j)
					String webService = gCell.getStringCellValue()
					testRunner.testCase.setPropertyValue('WEBSERVICE', webService)
					log.info "WebService =  $webService"
				}
			
			//Fetching operation name from the excel sheet
				if(headerValue.contains("Operation")){
					gRow = sheet.getRow(rowNum)
					gCell = gRow.getCell(j)
					String Operation = gCell.getStringCellValue()
					testRunner.testCase.setPropertyValue('OPERATION', Operation)
					log.info "Operation = $Operation"
				}

			/*fetching end point from the excel sheet and
			Setting endpoint to web service request which is with the test name as requestSample */
				if(headerValue.contains("EndPoint")){
					gRow = sheet.getRow(rowNum)
					gCell = gRow.getCell(j)
					String endPoint = gCell.getStringCellValue()
					def end= testRunner.testCase.getTestStepByName("requestSample").getHttpRequest().setEndpoint(endPoint)
					log.info "EndPoint = $endPoint"
				}
			
			/*fetching username from the excel sheet and
			Setting username for authentication to web service request which is with the test name as requestSample*/
				if(headerValue.contains("UserName")){
					gRow = sheet.getRow(rowNum)
					gCell = gRow.getCell(j)
					String userName = gCell.getStringCellValue()
					testRunner.testCase.testSteps["requestSample"].httpRequest.setUsername(userName)
					log.info "UserName = $userName"
				}

			/*fetching password from the excel sheet and
			Setting password for authentication to web service request which is with the test name as requestSample */
				if(headerValue.contains("Password")){
					gRow = sheet.getRow(rowNum)
					gCell = gRow.getCell(j)
					String passWord = gCell.getStringCellValue()
					testRunner.testCase.testSteps["requestSample"].httpRequest.setPassword(passWord)
					log.info "Password = $passWord"
				}
			
			/*fetching keystore certificate name from the excel sheet and
			Setting keystore certificate (SSL certificate) */
				if(headerValue.contains("KeyStore")){
					gRow = sheet.getRow(rowNum)
					gCell = gRow.getCell(j)
					String keyStore = gCell.getStringCellValue()
					def pathToKeystore = projectPath+"/../keyStore/"+keyStore
					SoapUI.settings.setString( SSLSettings.KEYSTORE, pathToKeystore)
					log.info "KeyStore = $keyStore"
				}
			
			/* Fetching Keystore password from excel sheet and
			Setting keystore password (SSL password)*/
				if(headerValue.contains("KeyPass")){
					gRow = sheet.getRow(rowNum)
					gCell = gRow.getCell(j)
					String keyPass = gCell.getStringCellValue()
					SoapUI.settings.setString( SSLSettings.KEYSTORE_PASSWORD, keyPass)
					log.info "KeyPass = $keyPass"
				}
			
			/*fetching environment name from excel sheet*/
				if(headerValue.contains("Env")){
					gRow = sheet.getRow(rowNum)
					gCell = gRow.getCell(j)
					String environMent = gCell.getStringCellValue()
					testRunner.testCase.setPropertyValue('ENVIRONMENT', environMent)
					log.info "Env = $environMent"
				}

			/* Ftech testcase name from testdata sheet*/
				if(headerValue.contains("TestCase")){
					gRow = sheet.getRow(rowNum)
					gCell = gRow.getCell(j)
					String testName = gCell.getStringCellValue()
					
					testRunner.testCase.setPropertyValue('TEST_CASE_NAME', testName)
					log.info "TEST_CASE_NAME = $testName"
				}
			}
		}
		else{
			int Row = rowNum+1
			testRunner.testCase.setPropertyValue('ROW_NUM', Row.toString())
			testRunner.gotoStepByName("bootstrap")
		}
	}</script></con:config></con:testStep><con:testStep type="groovy" name="sampleXML" id="e9a57e49-e35a-43f6-a37d-d4ea0a950c62"><con:settings/><con:config><script>/* Author: Preet Kumar
 * emailId: preetkumar897@gmail.com
 * Mobile: 961699669
 * Linkedin: linkedin.com/in/preetkumar897
 * Description: Creates sample request in sampleXML folder based on given Web service name and Web service operation name 
 * in each row in testdata sheet,
 */
	
	def projectName = testRunner.testCase.testSuite.project.name
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
	def projectPath = groovyUtils.projectPath
	def rowNum = testRunner.testCase.getPropertyValue("ROW_NUM").toInteger()
	
	def webService = testRunner.testCase.getPropertyValue("WEBSERVICE")
	def operation = testRunner.testCase.getPropertyValue("OPERATION")

	map = context.testCase.testSuite.project.interfaces[webService].operations

	for (entry in map)
	{
	opName = entry.getKey()
	if(opName==operation){
	inputFileRequest = new File(projectPath+"/../sampleXML/" + opName + ".xml")
	log.info "$inputFileRequest"
	def sampleXml = testRunner.testCase.setPropertyValue('SAMPLE_XML', inputFileRequest.toString())
	inputFileRequest.write(entry.getValue().createRequest(true))
	break
	}
	}
	def pickXml= testRunner.testCase.getPropertyValue("SAMPLE_XML")
	def xml = new File(pickXml).getText()
	xml.replaceAll("(?s)\\s*/\\*.*\\*/","")
	//log.info "$xml"
	</script></con:config></con:testStep><con:testStep type="transfer" name="pushSampleRequest" id="a7a5b53f-a095-453e-963d-1fedc4476a13"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>sampleRequest</con:name><con:sourceType>result</con:sourceType><con:sourceStep>sampleXML</con:sourceStep><con:targetType>Request</con:targetType><con:targetStep>requestSample</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="testData" id="d64c2d4a-5a4c-4885-bf93-a308343e41c1"><con:settings/><con:config><script><![CDATA[/* Author: Preet Kumar
 * emailId: preetkumar897@gmail.com
 * Mobile: 961699669
 * Linkedin: linkedin.com/in/preetkumar897
 * Description: Fetch the data from testdata sheet where column of first row are like Data
 * Test data sheet is in testData folder having same name as SoapUi project
 */

import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFDateUtil;
import org.apache.poi.hssf.usermodel.HSSFHyperlink;
import org.apache.poi.hssf.util.HSSFColor;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.xssf.usermodel.*;

import com.eviware.soapui.settings.SSLSettings
import com.eviware.soapui.SoapUI

	def testCaseName = testRunner.testCase.getPropertyValue("TESTCASE_NAME")
	def projectName = testRunner.testCase.testSuite.project.name
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
	def projectPath = groovyUtils.projectPath
	def testDataFilePath = projectPath+"/../testData/"+projectName+".xlsx"
     
	fis = new FileInputStream(new File(testDataFilePath));
	workbook = new XSSFWorkbook(fis);
	sheet = workbook.getSheet(testCaseName)

	try{
		int rowCount = sheet.getLastRowNum().toInteger()
		def rowNum = testRunner.testCase.getPropertyValue("ROW_NUM")
		int row = rowNum.toInteger()
		log.info "System is picking test case at row number: $row"

		if(row<=rowCount){
			def cellCount = sheet.getRow(row).getLastCellNum()
			for(int j=0; j<cellCount; j++){
				gRow = sheet.getRow(0)
				gCell = gRow.getCell(j)
				String colName = gCell.getStringCellValue()
				if(colName.contains("Data")){
					gRow = sheet.getRow(row)
					gCell = gRow.getCell(j)
					cellData = gCell.getStringCellValue()
					def (reqTagName, reqTagValue) = cellData.tokenize(';')
					if(reqTagName != null){
						log.info "ppp"
						//tc.setPropertyValue(reqTagValue, reqTagValue)
						testRunner.testCase.setPropertyValue('TAG_NAME', reqTagName)
						testRunner.testCase.setPropertyValue('TAG_VALUE', reqTagValue)
						holder = groovyUtils.getXmlHolder("requestSample#Request")
						if(reqTagName.contains("//") && !holder.containsKey(reqTagName)){
							def itemName = reqTagName.split("//")
							String strItem = "//"
							for(int i=2; i<itemName.size();i++){
								strItem = strItem+itemName[i]
								if(!holder.containsKey(strItem)){
									use (groovy.xml.dom.DOMCategory){
										String strChild = ""
										if(strItem.subString(strItem.length()-1, strItem.length()=="]")){strChild=strItem.subString(0,strItem.length()-3)}
											for(child in holder.getDomNodes(strChild)){
												def node = child.parent()
												def copyItem = node.getOwnerDocument().importNode(child,true)
												node.insertBefore(copyItem,child)
												holder.updateProperty()
												context.requestContent = holder.xml
												return
											}
									}
								}
								if(i<itemName.size()-1){strItem=strItem+"//"}			
							}
						}		
					}		
				}		
			}		
			for(int j=0; j<cellCount; j++){
				gRow = sheet.getRow(0)
				gCell = gRow.getCell(j)
				String colName = gCell.getStringCellValue()
				if(colName.contains("Data")){
					gRow = sheet.getRow(row)
					gCell = gRow.getCell(j)
					cellData = gCell.getStringCellValue()
					def (reqTagName, reqTagValue) = cellData.tokenize(';')
					//tc.setPropertyValue(reqTagValue, reqTagValue)
					testRunner.testCase.setPropertyValue('TAG_NAME', reqTagName)
					testRunner.testCase.setPropertyValue('TAG_VALUE', reqTagValue)
					if(reqTagName != null){
						holder = groovyUtils.getXmlHolder("requestSample#Request")
						if(!reqTagName.contains("//")){reqTagName ="//*:"+reqTagName}
						if(holder.containsKey(reqTagName)){
							holder [reqTagName] = reqTagValue
						}
						else
						{
							log.info "Do Nothing"	
						}
						holder.updateProperty()
						context.requestContent = holder.xml
					}
				}		
			}		
		}
		else
		{
			log.info "There is no test case to execute"
			testRunner.gotoStepByName('End')
		}
	}
	catch(Exception e)
	{
		log.info "$e"
	}
	finally
	{
		workbook.close()
	}]]></script></con:config></con:testStep><con:testStep type="request" name="requestSample" id="33348515-cf69-4981-af9d-05cf461a1d77"><con:settings/></con:testStep><con:testStep type="groovy" name="transformXml" id="4b7f54b6-b9cf-460f-bb0c-2862318901a6"><con:settings/><con:config><script>/* Author: Preet Kumar
 * emailId: preetkumar897@gmail.com
 * Mobile: 961699669
 * Linkedin: linkedin.com/in/preetkumar897
 * Description: Remove all empty child and parent nodes from the request xml, 
 * #KEEP is a keyword, if user wants to keep the node with empty value in request
 */

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def req = testRunner.testCase.testSteps["requestSample"].testRequest.getRequestContent()
def holder = groovyUtils.getXmlHolder(req)
//log.info "$holder"
use (groovy.xml.dom.DOMCategory) {
	for( node2 in holder.getDomNodes( "//*" )) {
		node2.depthFirst().each { child ->
			if(child.text().replaceAll("[ ]*[\r\n]*[?]*","") ==  ""){
				child.removeXobj()
			}
		}
	}
	for( node2 in holder.getDomNodes( "//*" )) {
		node2.depthFirst().each { child ->
			if(child.text() ==  "#KEEP"){
				child.value =""
			}
		}
	}
}
return holder.xml</script></con:config></con:testStep><con:testStep type="transfer" name="pushFinalRequest" id="82a757c2-728b-426e-9de3-ec6623bbe8ff"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>finalRequest</con:name><con:sourceType>result</con:sourceType><con:sourceStep>transformXml</con:sourceStep><con:targetType>Request</con:targetType><con:targetStep>WebServiceTest</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="request" name="WebServiceTest" id="cd3daec2-dcb8-422c-a759-da069e635202"><con:settings/></con:testStep><con:testStep type="groovy" name="writeReq&amp;Res" id="b60a26cf-da56-4290-922b-cf84d3ba8235"><con:settings/><con:config><script>/* Author: Preet Kumar
 * emailId: preetkumar897@gmail.com
 * Mobile: 961699669
 * Linkedin: linkedin.com/in/preetkumar897
 * Description: Write request and response of each test case in Output/runtime folder for the evidences
 */

import com.eviware.soapui.support.*; 

def testCase = testRunner.testCase.getPropertyValue("TEST_CASE_NAME")
log.info "$testCase"
def outputFolderPath = testRunner.testCase.getPropertyValue("OUTPUT_FOLDER_PATH")

//Get Current date time stamp to append the same in the file name. 
def date = new Date() 
def dts = date.format("yyyy-MM-dd-HH-mm-ss") 

//Write Request to a XML File and save it with Date Time stamp appended to your filename. 
def myXmlRequest = outputFolderPath+"/"+testCase+"_Request_"+dts+".xml" 
context.testCase.setPropertyValue("OP_REQUEST",myXmlRequest)
def request = context.expand('${WebServiceTest#Request}')
def req = new File(myXmlRequest) 
req.write(request, "UTF-8") 

// Write Response to a XMl File and save it with Date Time stamp appended to your filename. 
def myXmlResponse = outputFolderPath+"/"+testCase+"_Response_"+dts+".xml" 
context.testCase.setPropertyValue("OP_RESPONSE",myXmlResponse)
def response = context.expand( '${WebServiceTest#Response}' ) 
def res = new File(myXmlResponse) 
res.write(response, "UTF-8")


</script></con:config></con:testStep><con:testStep type="groovy" name="statusWrite" id="47580448-0473-4faf-9fa9-75fb1e2af0ed"><con:settings/><con:config><script><![CDATA[/* Author: Preet Kumar
 * emailId: preetkumar897@gmail.com
 * Mobile: 961699669
 * Linkedin: linkedin.com/in/preetkumar897
 * Description: Validate Expected fields from testdata sheet with response in WebServiceTest soap step
 * Write PASSED or FAILED status in testdata sheet
 */

import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFDateUtil;
import org.apache.poi.hssf.usermodel.HSSFHyperlink;
import org.apache.poi.hssf.util.HSSFColor;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.xssf.usermodel.*;
import com.eviware.soapui.settings.SSLSettings
import com.eviware.soapui.SoapUI
import com.eviware.soapui.support.XmlHolder

	
	def xml = new XmlHolder(context.response)
	def testCaseName = testRunner.testCase.getPropertyValue("TESTCASE_NAME")
	def projectName = testRunner.testCase.testSuite.project.name
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
	def projectPath = groovyUtils.projectPath
	def testDataFilePath = projectPath+"/../testData/"+projectName+".xlsx"
	def actual = null
	def status = "PASSED"
	context.testCase.setPropertyValue("FAILED_STATUS",status)

     fis = new FileInputStream(new File(testDataFilePath));
	workbook = new XSSFWorkbook(fis);
	sheet = workbook.getSheet(testCaseName);
	int rowCount = sheet.getLastRowNum().toInteger()
	def rowNum = testRunner.testCase.getPropertyValue("ROW_NUM")
	int row = rowNum.toInteger()
	
	if(row<=rowCount){
		def cellCount = sheet.getRow(row).getLastCellNum()
			for(int j=0; j<cellCount; j++){
				gRow = sheet.getRow(0)
				gCell = gRow.getCell(j)
				String colName = gCell.getStringCellValue()
				if(colName.contains("Expected")){
					gRow = sheet.getRow(row)
					gCell = gRow.getCell(j)
					cellData = gCell.getStringCellValue()
					if (cellData!='')
					{
						def (expectedXpath, expectedValue) = cellData.tokenize(';')
						log.info "$expectedXpath"
						log.info "$expectedValue"
						if(expectedXpath.contains("//"))
						{
							actual = xml.getNodeValue(expectedXpath).toString()
						}
						else
						{
							actual = xml.getNodeValue("//*:"+expectedXpath).toString()
						}
					if(expectedValue.contains("#EXISTS") && xml.getNodeValue("//*:"+expectedXpath)!=null)
					{
						if(xml.getNodeValue("//*:"+expectedXpath).isEmpty()==false)
						{
							status = "PASSED"
						}
						else
						{
							status = "FAILED"
						}
					}
					else
					{
						if(expectedValue == actual && status !='FAILED')
						{
							status = "PASSED"
							context.testCase.setPropertyValue('FAILED_STATUS',status)
						}
						else
						{
							status = "FAILED"
							context.testCase.setPropertyValue('FAILED_STATUS',status)
						}
					}  
				}
			}
		}  
		for(int j=0; j<cellCount; j++){
			gRow = sheet.getRow(0)
			gCell = gRow.getCell(j)
			String colName = gCell.getStringCellValue()
			if(colName.contains("Status")){
				gRow = sheet.getRow(row)
				gCell = gRow.getCell(j)
				gCell.setCellType(gCell.CELL_TYPE_STRING)
				gCell.setCellValue(status)
			}
		} 
	}
	 
	FileOutputStream fos = new FileOutputStream(testDataFilePath)
	workbook.write(fos)
	fos.close()

	row = row+1
	context.testCase.setPropertyValue('ROW_NUM',row.toString())

	if(row>rowCount)
	{
		testRunner.gotoStepByName("End")
	}
	else
	{
		testRunner.gotoStepByName("bootstrap")
	}
]]></script></con:config></con:testStep><con:testStep type="goto" name="getNextStep" id="bc8e42ce-66e2-42ca-8002-cd01ca785af1"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>whileTrue</con:name><con:type>XPATH</con:type><con:expression>true()</con:expression><con:targetStep>bootstrap</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="delay" name="End" id="9ca8dcf1-f1bb-483c-a025-4667de2bd90b"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:properties><con:property><con:name>ROW_NUM</con:name><con:value>7</con:value></con:property><con:property><con:name>TESTCASE_NAME</con:name><con:value>WebServiceTest</con:value></con:property><con:property><con:name>OUTPUT_FOLDER_PATH</con:name><con:value>/home/ryan/Soap_Practice/projects/../output/WebServiceTest2017-07-05 01:04:41 520</con:value></con:property><con:property><con:name>OPERATION</con:name><con:value>ConversionRate</con:value></con:property><con:property><con:name>WEBSERVICE</con:name><con:value>CurrencyConvertorSoap12</con:value></con:property><con:property><con:name>ENVIRONMENT</con:name><con:value>SIT</con:value></con:property><con:property><con:name>TAG_NAME</con:name><con:value>ToCurrency</con:value></con:property><con:property><con:name>TAG_VALUE</con:name><con:value>EUR</con:value></con:property><con:property><con:name>SAMPLE_XML</con:name><con:value>/home/ryan/Soap_Practice/projects/../sampleXML/ConversionRate.xml</con:value></con:property><con:property><con:name>FAILED_STATUS</con:name><con:value>FAILED</con:value></con:property><con:property><con:name>OP_REQUEST</con:name><con:value>/home/ryan/Soap_Practice/projects/../output/WebServiceTest2017-07-05 01:04:41 520/Test6_Request_2017-07-05-01-04-45.xml</con:value></con:property><con:property><con:name>OP_RESPONSE</con:name><con:value>/home/ryan/Soap_Practice/projects/../output/WebServiceTest2017-07-05 01:04:41 520/Test6_Response_2017-07-05-01-04-45.xml</con:value></con:property><con:property><con:name>TEST_CASE_NAME</con:name><con:value>Test6</con:value></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:properties><con:property><con:name>TIMESTAMP</con:name><con:value>2017-07-05 01:04:41 520</con:value></con:property></con:properties><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>